#!/bin/bash
# WARNING: this script will destroy data on the selected disk.
# This script can be run by executing the following:
#   curl -sL https://git.io/vAoV8 | bash


################# GLOBAL BATCH SETTINGS #################

locale="en_GB.UTF-8 UTF-8"
keyboard_layout="uk"
mirror_list_url="https://www.archlinux.org/mirrorlist/?country=GB&protocol=https&use_mirror_status=on"
timezone="Europe/London"
echo "[baraud]" >> ./baraud_mirror
echo "SigLevel = Optional TrustAll" >> ./baraud_mirror
echo "Server = https://arch-mirror.baraud.fr" >> ./baraud_mirror
private_mirror="./baraud_mirror"
package_list="baraud-base baraud-desktop"

manage_error_during_install(){
	set -o pipefail
	trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
	### Set up logging ###
	exec 1> >(tee "stdout.log")
	exec 2> >(tee "stderr.log")
}

################# HARD DRIVE PARTITION #################

is_uefi() {
	ls /sys/firmware/efi/efivars &> /dev/null
}

get_drive_to_install(){
	devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
	device=$(dialog --stdout --menu "Select disk for root" 0 0 0 ${devicelist}) || exit 1
	device_home=$(dialog --stdout --menu "Select disk for home" 0 0 0 ${devicelist}) || exit 1
}

compute_part_root_on_shared_device(){
	device_size=$(parted $device unit GiB print | grep $device | cut -d ' ' -f3 | cut -d '.' -f1)
	[[ $device_size -gt 130 ]] && root_end="60GiB" 
	[[ $device_size -le 130 ]] && root_end="40GiB" 
	[[ $device_size -le 80 ]] && root_end="20GiB" 
	[[ $device_size -le 20 ]] && root_end="50%"
}

compute_partitions_size(){
	is_uefi && uefi_size=129 || uefi_size=1
	swap_size=$(free --mebi | awk '/Mem:/ {print $2}')
	swap_end=$(( $swap_size + 1 + $uefi_size ))MiB
	root_begin=$swap_end
	[[ $device == $device_home ]] && compute_part_root_on_shared_device || root_end="100%"
	[[ $device == $device_home ]] && home_begin=$root_end || home_begin="1MiB"
	home_end="100%"
}

format_and_mount_uefi(){
	part_boot="$(ls ${device}* | grep -E "^${device}p?1$")"
	part_swap="$(ls ${device}* | grep -E "^${device}p?2$")"
	part_root="$(ls ${device}* | grep -E "^${device}p?3$")"
	if [[ "Sdevice" == "$device_home" ]]
	then
		part_home="$(ls ${device}* | grep -E "^${device}p?4$")"
	else
		part_home="$(ls ${device_home}* | grep -E "^${device}p?1$")"
	fi
	wipefs "${part_boot}"
	wipefs "${part_swap}"
	wipefs "${part_root}"
	wipefs "${part_home}"

	mkfs.vfat -F32 "${part_boot}"
	mkswap "${part_swap}"
	mkfs.ext4 "${part_root}"
	mkfs.ext4 "${part_home}"

	swapon "${part_swap}"
	mount "${part_root}" /mnt
	mkdir /mnt/home
	mount "${part_home}" /mnt/home
	mkdir /mnt/boot
	mount "${part_boot}" /mnt/boot
}

format_and_mount_bios(){
	part_swap="$(ls ${device}* | grep -E "^${device}p?1$")"
	part_root="$(ls ${device}* | grep -E "^${device}p?2$")"
	if [[ "$device" == "$device_home" ]]
	then
		part_home="$(ls ${device}* | grep -E "^${device}p?3$")"
	else
		part_home="$(ls ${device_home}* | grep -E "^${device}p?1$")"
	fi
	wipefs "${part_swap}"
	wipefs "${part_root}"
	wipefs "${part_home}"

	mkswap "${part_swap}"
	mkfs.ext4 "${part_root}"
	mkfs.ext4 "${part_home}"

	swapon "${part_swap}"
	mount "${part_root}" /mnt
	mkdir /mnt/home
	mount "${part_home}" /mnt/home
}

partition_hard_drive(){
	get_drive_to_install
	compute_partitions_size
	is_uefi && label="gpt" || label="msdos"

	parted --script ${device} -- mklabel "$label"
	is_uefi && parted --script ${device} -- mkpart ESP fat32 1MiB "$uefi_size"MiB
	parted --script ${device} -- mkpart primary linux-swap "$uefi_size"MiB "$swap_end"
	parted --script ${device} -- mkpart primary ext4 "$swap_end" "$root_end"
	parted --script ${device_home} -- mkpart primary ext4 "$home_begin" "$home_end"
	is_uefi && parted --script ${device} -- set 1 boot on || parted --script ${device} -- set 2 boot on
	[[ is_uefi ]] && format_and_mount_uefi || format_and_mount_bios
}

################# INSTALL LINUX #################


# -------------- PACKAGES ----------------#

update_mirror_list(){
	pacman -Sy --noconfirm pacman-contrib
	curl -s "$mirror_list_url" | \
	    sed -e 's/^#Server/Server/' -e '/^#/d' | \
	    rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
	pacman -Sy
}

update_private_mirror(){
	cat $private_mirror >> /etc/pacman.conf
	pacman -Sy
}

update_repo() {
	[[ -n $mirror_list_url ]] && update_mirror_list
	[[ -n $private_mirror ]] && update_private_mirror
        pacman -Sy
}

update_repo_install_linux(){
	cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
	cp /etc/pacman.conf /mnt/etc/pacman.conf
	arch-chroot /mnt pacman -Sy
}

install_packages(){
	update_repo
	[[ -z "$package_list" ]] && package_list="base linux linux-firmware"
	pacstrap /mnt $package_list
	update_repo_install_linux
}

# -------------- NETWORK ----------------#

get_hostname(){
	hostname=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
	clear
	: ${hostname:?"hostname cannot be empty"}
}

set_hostname(){
	[[ -z "$hostname" ]] && get_hostname
	echo "${hostname}" > /mnt/etc/hostname
}

# -------------- LOCALES ----------------#

get_locale(){
	locale_list=$(cut -d '#' -f2 /etc/locale.gen)
	locale=$(dialog --stdout --menu "Select locale computer" $locale_list 0 0 0  )
}

get_keyboard_layout(){
	keyboard_layout_list=$(ls /usr/share/kbd/keymaps/**/*.map.gz | sed 's:\(.*\)/\(.*\)\.map\.gz:\2 (\1):')
	keyboard_layout=$(dialog --stdout --menu "Select keyboard layout" $keyboard_layout_list 0 0 0  )
}

get_timezone(){
	timezone_list=$(ls /usr/share/kbd/keymaps/**/*.map.gz | sed 's:\(.*\)/\(.*\)\.map\.gz:\2 (\1):')
	timezone=$(dialog --stdout --menu "Select a timezone" $timezone_list 0 0 0  )
}

generate_locales(){
	[[ -z "$locale" ]] && get_locale
	[[ -z "$keyboard_layout" ]] && get_keyboard_layout
	[[ -z "$timezone" ]] && get_timezone
	echo $locale >> /mnt/etc/locale.gen
	echo $keyboard_layout >> /mnt/etc/vconsole.conf
	arch-chroot /mnt ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime
	arch-chroot /mnt locale-gen
	arch-chroot /mnt hwclock --systohc
	loadkeys $keyboard_layout
}


# -------------- USER ----------------#

get_username(){
	user=$(dialog --stdout --inputbox "Enter admin username" 0 0) || exit 1
	clear
	: ${user:?"user cannot be empty"}
}

get_password(){
	message="Please enter admin password"
	while [[ -z "$password" ]]  || [[ -z "$password2" ]] || [[ "$password" != "$password2" ]]; do
		password=$(dialog --stdout --passwordbox "$message" 0 0) || exit 1
		clear
		: ${password:?"password cannot be empty"}
		password2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
		clear
		message="Password cannot be empty and need to match. Try again:"
	done
}

add_user(){
	[[ -z "$user" ]] && get_username
	[[ -z "$password" ]] && get_password
	[[ -z "$shell" ]] && shell="/bin/sh"
	arch-chroot /mnt useradd -mU -s "$shell" -G wheel,uucp,video,audio,storage,games,input "$user"
	arch-chroot /mnt chsh -s $shell
	echo "$user ALL=(ALL:ALL) ALL" >> /mnt/etc/sudoers
	echo "$user:$password" | chpasswd --root /mnt
	echo "root:$password" | chpasswd --root /mnt
}


# -------------- CONFIG ----------------#

add_config(){
	return 0
}

# --------------- BOOTLOADER ------------#

install_bootloader_uefi(){
       arch-chroot /mnt bootctl install
       echo "default arch" > /mnt/boot/loader/loader.conf
       echo "title    Arch Linux" > /mnt/boot/loader/entries/arch.conf
       echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch.conf
       echo "initrd   /initramfs-linux.img" >> /mnt/boot/loader/entries/arch.conf
       echo "options  root=PARTUUID=$(blkid -s PARTUUID -o value "$part_root") rw" >> /mnt/boot/loader/entries/arch.conf
}

install_bootloader_bios(){
	arch-chroot /mnt pacman -Sy grub
	arch-chroot /mnt grub-install --target=i386-pc "$device"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
}

install_bootloader(){
	genfstab -t PARTUUID /mnt >> /mnt/etc/fstab
	is_uefi && install_bootloader_uefi || install_bootloader_bios
}

# -------------- INSTALL ----------------#

manage_error_during_install && \
partition_hard_drive && \
install_packages && \
generate_locales && \
set_hostname && \
install_bootloader && \
add_user && \
add_config
